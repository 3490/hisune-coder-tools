// Generated by hisune.com 1.8.0 copy /b nw.exe+test.nw  test.exe
(function () {
    var __indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    $(function () {
        var addConfig, addServer, args, chooseServer, deleteConfig, divWarning, divWarningShown, gui, hide, isRestarting, load, local, menu, os, publicConfig, quit, reloadServerList, restartServer, save, serverHistory, show, tray, util, win;
        os = require('os');
        gui = require('nw.gui');
        gui.Window.get().maximize();

        divWarning = $('#divWarning');
        divWarningShown = false;
        serverHistory = function () {
            return (localStorage['server_history'] || '').split('|');
        };
        util = require('util');
        util.log = function (s) {
            console.log(new Date().toLocaleString() + (" - " + s));
            if (!divWarningShown) {
                divWarning.show();
                divWarningShown = true;
            }
            return divWarning.text(s);
        };
        args = require('./args');
        local = require('shadowsocks');
        addServer = function (serverIP) {
            var newServers, server, servers, _i, _len;
            servers = (localStorage['server_history'] || '').split('|');
            servers.push(serverIP);
            newServers = [];
            for (_i = 0, _len = servers.length; _i < _len; _i++) {
                server = servers[_i];
                if (server && __indexOf.call(newServers, server) < 0) {
                    newServers.push(server);
                }
            }
            return localStorage['server_history'] = newServers.join('|');
        };
        $('#inputServerIP').typeahead({
            source: serverHistory
        });
        chooseServer = function () {
            var index;
            index = +$(this).attr('data-key');
            args.saveIndex(index);
            load(false);
            return reloadServerList();
        };
        reloadServerList = function () {
            var configName, configs, currentIndex, divider, i, menuItem, serverMenu, _results;
            currentIndex = args.loadIndex();
            configs = args.allConfigs();
            divider = $('#serverIPMenu .insert-point');
            serverMenu = $('#serverIPMenu .divider');
            $('#serverIPMenu li.server').remove();
            i = 0;
            _results = [];
            for (configName in configs) {
                if (i === currentIndex) {
                    menuItem = $("<li class='server'><a tabindex='-1' data-key='" + i + "' href='#'><i class='icon-ok'></i> " + configs[configName] + "</a> </li>");
                } else {
                    menuItem = $("<li class='server'><a tabindex='-1' data-key='" + i + "' href='#'><i class='icon-not-ok'></i> " + configs[configName] + "</a> </li>");
                }
                menuItem.find('a').click(chooseServer);
                menuItem.insertBefore(divider, serverMenu);
                _results.push(i++);
            }
            return _results;
        };
        addConfig = function () {
            args.saveIndex(NaN);
            reloadServerList();
            return load(false);
        };
        deleteConfig = function () {
            args.deleteConfig(args.loadIndex());
            args.saveIndex(NaN);
            reloadServerList();
            return load(false);
        };
        publicConfig = function () {
            args.saveIndex(-1);
            reloadServerList();
            return load(false);
        };
        save = function () {
            var config, index;
            config = {};
            $('input,select').each(function () {
                var key, val;
                key = $(this).attr('data-key');
                val = $(this).val();
                return config[key] = val;
            });
            index = args.saveConfig(args.loadIndex(), config);
            args.saveIndex(index);
            reloadServerList();
            util.log('config saved');
            restartServer(config);
            return false;
        };
        load = function (restart) {
            var config;
            config = args.loadConfig(args.loadIndex());
            $('#shadow-form ').find('input,select').each(function () { // 这里坑了我啊，把所有input和select的值重新赋值了。。。
                var key, val;
                key = $(this).attr('data-key');
                val = config[key] || '';
                $(this).val(val);
                return config[key] = this.value;
            });
            if (restart) {
                return restartServer(config);
            }
        };
        isRestarting = false;
        restartServer = function (config) {
            var e, start;
            if (config.server && +config.server_port && config.password && +config.local_port && config.method && +config.timeout) {
                if (isRestarting) {
                    util.log("Already restarting");
                    return;
                }
                isRestarting = true;
                start = function () {
                    var e;
                    try {
                        isRestarting = false;
                        util.log('Starting shadowsocks...');
                        window.local = local.createServer(config.server, config.server_port, config.local_port, config.password, config.method, 1000 * (config.timeout || 600), '127.0.0.1');
                        addServer(config.server);
                        $('#divError').fadeOut();
                        return true;
                    } catch (_error) {
                        e = _error;
                        return util.log(e);
                    }
                };
                if (window.local != null) {
                    try {
                        util.log('Restarting shadowsocks');
                        if (window.local.address()) {
                            window.local.close();
                        }
                        return setTimeout(start, 1000);
                    } catch (_error) {
                        e = _error;
                        isRestarting = false;
                        return util.log(e);
                    }
                } else {
                    return start();
                }
            } else {
                return $('#divError').fadeIn();
            }
        };
        // ip查询
        var superagent = require('superagent');
        searchIp = function(ip){
            superagent.get('http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&ip=' +ip).end(function(err, sres){
                if(err)
                    return next(err);

                var detail=eval("("+sres.text+")");
                var html = '';
                html += '<div><b>Search IP: ' + ip + '</b></div>';
                $.each(detail, function(i, n){
                    html += '<div>' + i + ': ' + n;
                });
                $('#ip-search-result').children('div').append(html);
            });
        };

        $('#ip-search-submit').on('click', function () {
            var _search_result = $('#ip-search-result'),
                _search_btn = $('#ip-search-submit'),
                _search_val = $('#ip-search').val().trim().replace(/(^https?:\/\/)?/, '').replace(/\/(.*)/, ''),
                _search_type = $(this).siblings().find('input[type=radio]:checked').val(),
                spawn = require('child_process').spawn,
                iconv = require('iconv-lite'); // 中文乱码解决;

            _search_btn.prop('disabled', true).html('RUNING...');
            _search_result.html('<div class="alert alert-success" role="alert" style="margin-top: 12px;"></div>');

            switch(_search_type){
                case 'area':
                    if(_search_val == '' || _search_val.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)){
                        searchIp(_search_val);
                    }else{
                        var dns = require('dns');
                        dns.resolve4(_search_val, function (err, addresses) {
                            if (err){
                                _search_result.children('div').append('域名或ip有误');
                                return false;
                            }
                            var json = eval('(' + JSON.stringify(addresses) + ')');
                            var html = '';
                            $.each(json, function(i, n){
                                if(i == 0)
                                    searchIp(n);
                                html += n + '&nbsp;&nbsp;';
                            });
                            _search_result.children('div').append(_search_val + ' 的A记录解析ip: ' + html + '<br />');
                        });
                    }
                    _search_btn.prop('disabled', false).html('查询');
                    break;
                case 'ping':
                case 'tracert':
                    var _cmd = spawn(_search_type, [_search_val]);
                    _cmd.stdout.on('data', function (data) {
                        _search_result.children('div').append(iconv.decode(data, 'GBK').replace(/\r\n/g, '<br />'));
                    });
                    _cmd.stderr.on('data', function (data) {
                        console.log('stderr: ' + data);
                    });
                    _cmd.on('exit', function (code) {
                        _search_btn.prop('disabled', false).html('查询');
                    });
                    break;
            }


        });
        // 翻译
        $('#trans-submit').on('click', function(){
            superagent.get('http://fanyi.youdao.com/openapi.do?keyfrom=hello-today&key=2131466618&type=data&doctype=json&version=1.1&q=' + $('#trans').val()).end(function(err, sres){
                if(err)
                    return next(err);
                var detail=eval("("+sres.text+")");
                switch(detail.errorCode){
                    case 20:
                        var html = '要翻译的文本过长';
                        break;
                    case 30:
                        var html = '无法进行有效的翻译';
                        break;
                    case 40:
                        var html = '不支持的语言类型';
                        break;
                    case 50:
                        var html = '无效的key';
                        break;
                    case 0:
                        if(detail.hasOwnProperty("basic") && detail.basic.hasOwnProperty("phonetic"))
                            var phonetic = ' [ ' + detail.basic.phonetic + ']';
                        else
                            var phonetic = '';

                        var explains = '<div style="margin: 6px 0;">';
                        if(detail.hasOwnProperty("basic") && detail.basic.hasOwnProperty("explains")){
                            $.each(detail.basic.explains, function(i, n){
                                explains += '<div>' + n + '</div>';
                            });
                        }
                        explains += '</div>';

                        var web = '<div style="margin: 6px 0;">';
                        if(detail.hasOwnProperty("web")){
                            $.each(detail.web, function(i, n){
                                web += '<div>' + n.key + ': ';
                                web += n["value"].join(', ');
                                web += '</div>';
                            });
                        }
                        web += '</div>';

                        var html = '<div style="margin: 6px 0;">' + detail.translation[0] + phonetic +  '</div>' + explains + web;

                        break;
                    default:
                        var html = '未知错误';
                }
                $('#trans-result').html('<div class="alert alert-success" role="alert" style="margin-top: 12px;">' + html + '</div>');
            });
        });
        // 小工具
        var utility = require('utility');
        $('#unix2str').val(utility.timestamp());
        $('#str2unix').val(utility.YYYYMMDDHHmmss());
        $('#decode-submit').on('click', function(){
            $('#decode-form').find('input.decode-input').each(function(){
                var input = $(this).val();
                if(input != ''){
                    var type = $(this).data('decode');
                    switch(type){
                        case 'md5':
                            input = utf8to16(utf16to8(input));
                            var html = utility.md5(input);
                            break;
                        case 'sha1':
                            input = utf8to16(utf16to8(input));
                            var html = utility.sha1(input);
                            break;
                        case 'base64encode':
                            input = utf8to16(utf16to8(input));
                            var html = utility.base64encode(input);
                            break;
                        case 'base64decode':
                            input = utf8to16(utf16to8(input));
                            var html = utility.base64decode(input);
                            break;
                        case 'unix2str':
                            var html = utility.YYYYMMDDHHmmss(utility.timestamp(input));
                            break;
                        case 'str2unix':
							if(input.indexOf(':') <= 0)
								input = input + ' 0:0';
                            var html = new Date(input).getTime() / 1000;
                            break;
                        case 'random':
                            var length = new Number($('#random-length').val());
                            var html = utility.randomString(length, input);
                            break;
                        default:
                            var html = '';
                    }
                    $(this).next('div').html('<div style="color: #3c763d;">' + html + '</div>');
                }
            });
        });
        var utf16to8 = function(str) {
            var out, i, len, c;

            out = "";
            len = str.length;
            for(i = 0; i < len; i++) {
                c = str.charCodeAt(i);
                if ((c >= 0x0001) && (c <= 0x007F)) {
                    out += str.charAt(i);
                } else if (c > 0x07FF) {
                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));
                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                } else {
                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));
                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                }
            }
            return out;
        };
        var utf8to16 = function(str) {
            var out, i, len, c;
            var char2, char3;

            out = "";
            len = str.length;
            i = 0;
            while(i < len) {
                c = str.charCodeAt(i++);
                switch(c >> 4)
                {
                    case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                    // 0xxxxxxx
                    out += str.charAt(i-1);
                    break;
                    case 12: case 13:
                    // 110x xxxx   10xx xxxx
                    char2 = str.charCodeAt(i++);
                    out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                    break;
                    case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = str.charCodeAt(i++);
                        char3 = str.charCodeAt(i++);
                        out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                        break;
                }
            }

            return out;
        };
        $('#open-site').on('click', function(){
            return gui.Shell.openExternal('http://hisune.com');
        });
        $('.open-file').on('click', function(){
            return gui.Shell.openItem(process.execPath + '/../' + $(this).data('file'));
        });
        $('.open-sys').on('click', function(){
            return gui.Shell.openItem($(this).data('file'));
        });

        $('#buttonSave').on('click', save);
        $('#buttonNewProfile').on('click', addConfig);
        $('#buttonDeleteProfile').on('click', deleteConfig);
        $('#buttonPublicServer').on('click', publicConfig);
        $('#buttonConsole').on('click', function () {
            return gui.Window.get().showDevTools();
        });
        tray = new gui.Tray({
            icon: 'menu_icon@2x.png'
        });
        menu = new gui.Menu();
        tray.on('click', function () {
            return gui.Window.get().show();
        });
        show = new gui.MenuItem({
            type: 'normal',
            label: 'Show',
            click: function () {
                return gui.Window.get().show();
            }
        });
        quit = new gui.MenuItem({
            type: 'normal',
            label: 'Quit',
            click: function () {
                return gui.Window.get().close(true);
            }
        });
        hide = new gui.MenuItem({
            type: 'normal',
            label: 'Hide',
            click: function () {
                return gui.Window.get().hide();
            }
        });
        menu.append(show);
        menu.append(hide);
        menu.append(quit);
        tray.menu = menu;
        window.tray = tray;
        win = gui.Window.get();
        win.on('minimize', function () {
            return this.hide();
        });
        win.on('close', function (quit) {
            if (os.platform() === 'darwin' && !quit) {
                return this.hide();
            } else {
                return this.close(true);
            }
        });
        reloadServerList();
        return load(true);
    });
}).call(this);
